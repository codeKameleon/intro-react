{"version":3,"sources":["components/AddTodo/AddTodo.jsx","components/TodoList/TodoList.jsx","components/Todo/Todo.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["AddTodo","addTodo","inputRef","useRef","className","ref","type","placeholder","onClick","e","preventDefault","current","value","TodoList","todos","renderItem","map","todo","Todo","removeTodo","updateCompletion","snakeCase","str","replace","id","onChange","name","checked","completed","htmlFor","LSKEY","App","useState","todosToComplete","setTodosToComplete","todosCompleted","setTodosCompleted","filter","t","useEffect","storedTodosToComplete","JSON","parse","localStorage","getItem","storedTodosCompleted","setItem","stringify","uuidv4","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.91a961f8.chunk.js","sourcesContent":["import React, { useRef }from 'react';\nimport './AddTodo.scss';\n\nconst AddTodo = ({addTodo}) => {\n    const inputRef = useRef()\n\n    const handleSubmit = e => {\n      e.preventDefault()\n      addTodo(inputRef.current.value)\n    }\n\n    return (\n        <div className=\"AddTodo\">\n          <input ref={inputRef} type=\"text\" placeholder=\"Type a new todo\"/>\n\n          <button onClick={handleSubmit}>Add</button>\n        </div>\n     );\n}\n\nexport default AddTodo;","import './TodoList.scss';\n\nconst TodoList = ({todos, renderItem}) => {\n    return ( \n        <div className=\"TodoList\">\n          <ul>\n              {todos.map(todo => renderItem(todo))}\n          </ul>\n        </div>\n     );\n}\n\nexport default TodoList;","import './Todo.scss'\n\nconst Todo = ({todo, removeTodo, updateCompletion}) => {\n    const snakeCase = str => {\n        str = str.replace(/ /g,\"_\"); \n        return str\n    }\n\n    return ( \n        <li className=\"Todo\" id={todo.id}>\n            <input onChange={() => updateCompletion(todo)} type=\"checkbox\" id={snakeCase(todo.name)} checked={todo.completed} />\n            <label className={todo.completed ? 'isCompleted' : 'isNotCompleted'} htmlFor={snakeCase(todo.name)}>{todo.name}</label>\n            <button onClick={() => removeTodo(todo)}>Remove</button>\n        </li>\n     );\n}\n\nexport default Todo;","import React, { useState, useEffect } from 'react';\nimport {v4 as uuidv4} from 'uuid';\nimport AddTodo from './components/AddTodo/AddTodo';\nimport TodoList from './components/TodoList/TodoList';\nimport Todo from './components/Todo/Todo';\n\nimport './App.scss';\n\nconst LSKEY = 'MyTodoApp'\n\nconst App = () => {\n  // Initializing the state\n  const [todosToComplete, setTodosToComplete] = useState([])\n  const [todosCompleted, setTodosCompleted] = useState([])\n\n    // Updating the state\n  const addTodo = todo => {\n    setTodosToComplete([...todosToComplete, {id: uuidv4(), name: todo, completed: false}])\n  }\n\n    // Removing todos\n  const removeTodo = todo => {\n    if(todo.completed === false) {\n      setTodosToComplete(todosToComplete.filter(t => t.id !== todo.id))\n    } else {\n      setTodosCompleted(todosCompleted.filter(t => t.id !== todo.id))\n    }\n  }\n\n    // Change todo completion status\n  const updateCompletion = todo => {\n    if(todo.completed === false) {\n      setTodosCompleted([...todosCompleted, todo])\n      setTodosToComplete(todos => todosToComplete.filter(todo => todo.completed === false))\n    } else {\n      setTodosToComplete([...todosToComplete, todo])\n      setTodosCompleted(todos => todosCompleted.filter(todo => todo.completed === true))\n    }\n\n    todo.completed = !todo.completed\n  }\n\n  // Get todos from localStorage\n  useEffect(() => {\n    const storedTodosToComplete = JSON.parse(localStorage.getItem(LSKEY + \".todos_to_complete\"))\n    const storedTodosCompleted = JSON.parse(localStorage.getItem(LSKEY + \".todos_completed\"))\n\n    setTodosToComplete(storedTodosToComplete)\n    setTodosCompleted(storedTodosCompleted)\n  },[])\n\n  // Save todos to localStorage\n  useEffect(() => {\n    localStorage.setItem(LSKEY + \".todos_to_complete\", JSON.stringify(todosToComplete));\n  },[todosToComplete]);\n\n  useEffect(() => {\n    localStorage.setItem(LSKEY + \".todos_completed\", JSON.stringify(todosCompleted));\n  }, [todosCompleted])\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Todos</h1>\n        <AddTodo addTodo={addTodo}/>\n      </header>\n\n      <main>\n        {todosToComplete.length > 0 ? (\n          <section>\n            <TodoList todos={todosToComplete} renderItem={todo =>(\n              <Todo \n                key={todo.id}\n                todo={todo}\n                removeTodo={removeTodo}\n                updateCompletion={updateCompletion}\n                />\n              )}\n            />  \n          </section>\n          )\n          :\n          null\n        }\n\n        {todosCompleted.length > 0 ? (\n          <section>\n            <h2>{todosCompleted.length} taks completed</h2>\n\n            <TodoList todos={todosCompleted} renderItem={todo => (\n              <Todo \n              key={todo.id}\n              todo={todo}\n              removeTodo={removeTodo}\n              updateCompletion={updateCompletion}\n              />\n            )}/>\n          </section> \n          )\n          :\n          null\n        }\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}